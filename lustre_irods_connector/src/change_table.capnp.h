// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: change_table.capnp

#ifndef CAPNP_INCLUDED_91aad5f4a36030a9_
#define CAPNP_INCLUDED_91aad5f4a36030a9_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d9a83e4ac76efb39);
CAPNP_DECLARE_SCHEMA(91656da5d3611dc7);
enum class EventTypeEnum_91656da5d3611dc7: uint16_t {
  OTHER,
  CREATE,
  UNLINK,
  RMDIR,
  MKDIR,
  RENAME,
  WRITE_FID,
};
CAPNP_DECLARE_ENUM(EventTypeEnum, 91656da5d3611dc7);
CAPNP_DECLARE_SCHEMA(c18a187835dc7f2b);
enum class ObjectTypeEnum_c18a187835dc7f2b: uint16_t {
  FILE,
  DIR,
};
CAPNP_DECLARE_ENUM(ObjectTypeEnum, c18a187835dc7f2b);
CAPNP_DECLARE_SCHEMA(bc6d5f61ec676ebd);
CAPNP_DECLARE_SCHEMA(cabd3de2d1baf714);

}  // namespace schemas
}  // namespace capnp


struct ChangeDescriptor {
  ChangeDescriptor() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::EventTypeEnum_91656da5d3611dc7 EventTypeEnum;

  typedef ::capnp::schemas::ObjectTypeEnum_c18a187835dc7f2b ObjectTypeEnum;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9a83e4ac76efb39, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RegisterMapEntry {
  RegisterMapEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc6d5f61ec676ebd, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChangeMap {
  ChangeMap() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cabd3de2d1baf714, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ChangeDescriptor::Reader {
public:
  typedef ChangeDescriptor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFidstr() const;
  inline  ::capnp::Text::Reader getFidstr() const;

  inline bool hasParentFidstr() const;
  inline  ::capnp::Text::Reader getParentFidstr() const;

  inline bool hasObjectName() const;
  inline  ::capnp::Text::Reader getObjectName() const;

  inline bool hasLustrePath() const;
  inline  ::capnp::Text::Reader getLustrePath() const;

  inline  ::ChangeDescriptor::EventTypeEnum getEventType() const;

  inline  ::int64_t getTimestamp() const;

  inline bool getOperComplete() const;

  inline  ::ChangeDescriptor::ObjectTypeEnum getObjectType() const;

  inline  ::int64_t getFileSize() const;

  inline  ::int64_t getCrIndex() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChangeDescriptor::Builder {
public:
  typedef ChangeDescriptor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFidstr();
  inline  ::capnp::Text::Builder getFidstr();
  inline void setFidstr( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFidstr(unsigned int size);
  inline void adoptFidstr(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFidstr();

  inline bool hasParentFidstr();
  inline  ::capnp::Text::Builder getParentFidstr();
  inline void setParentFidstr( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initParentFidstr(unsigned int size);
  inline void adoptParentFidstr(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownParentFidstr();

  inline bool hasObjectName();
  inline  ::capnp::Text::Builder getObjectName();
  inline void setObjectName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initObjectName(unsigned int size);
  inline void adoptObjectName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownObjectName();

  inline bool hasLustrePath();
  inline  ::capnp::Text::Builder getLustrePath();
  inline void setLustrePath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLustrePath(unsigned int size);
  inline void adoptLustrePath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLustrePath();

  inline  ::ChangeDescriptor::EventTypeEnum getEventType();
  inline void setEventType( ::ChangeDescriptor::EventTypeEnum value);

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline bool getOperComplete();
  inline void setOperComplete(bool value);

  inline  ::ChangeDescriptor::ObjectTypeEnum getObjectType();
  inline void setObjectType( ::ChangeDescriptor::ObjectTypeEnum value);

  inline  ::int64_t getFileSize();
  inline void setFileSize( ::int64_t value);

  inline  ::int64_t getCrIndex();
  inline void setCrIndex( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChangeDescriptor::Pipeline {
public:
  typedef ChangeDescriptor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RegisterMapEntry::Reader {
public:
  typedef RegisterMapEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLustrePath() const;
  inline  ::capnp::Text::Reader getLustrePath() const;

  inline bool hasIrodsRegisterPath() const;
  inline  ::capnp::Text::Reader getIrodsRegisterPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RegisterMapEntry::Builder {
public:
  typedef RegisterMapEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLustrePath();
  inline  ::capnp::Text::Builder getLustrePath();
  inline void setLustrePath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLustrePath(unsigned int size);
  inline void adoptLustrePath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLustrePath();

  inline bool hasIrodsRegisterPath();
  inline  ::capnp::Text::Builder getIrodsRegisterPath();
  inline void setIrodsRegisterPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIrodsRegisterPath(unsigned int size);
  inline void adoptIrodsRegisterPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIrodsRegisterPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RegisterMapEntry::Pipeline {
public:
  typedef RegisterMapEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChangeMap::Reader {
public:
  typedef ChangeMap Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline  ::capnp::List< ::ChangeDescriptor>::Reader getEntries() const;

  inline bool hasRegisterMap() const;
  inline  ::capnp::List< ::RegisterMapEntry>::Reader getRegisterMap() const;

  inline  ::int64_t getResourceId() const;

  inline bool hasUpdateStatus() const;
  inline  ::capnp::Text::Reader getUpdateStatus() const;

  inline bool hasIrodsApiUpdateType() const;
  inline  ::capnp::Text::Reader getIrodsApiUpdateType() const;

  inline bool hasResourceName() const;
  inline  ::capnp::Text::Reader getResourceName() const;

  inline  ::int64_t getMaximumRecordsPerSqlCommand() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChangeMap::Builder {
public:
  typedef ChangeMap Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline  ::capnp::List< ::ChangeDescriptor>::Builder getEntries();
  inline void setEntries( ::capnp::List< ::ChangeDescriptor>::Reader value);
  inline  ::capnp::List< ::ChangeDescriptor>::Builder initEntries(unsigned int size);
  inline void adoptEntries(::capnp::Orphan< ::capnp::List< ::ChangeDescriptor>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ChangeDescriptor>> disownEntries();

  inline bool hasRegisterMap();
  inline  ::capnp::List< ::RegisterMapEntry>::Builder getRegisterMap();
  inline void setRegisterMap( ::capnp::List< ::RegisterMapEntry>::Reader value);
  inline  ::capnp::List< ::RegisterMapEntry>::Builder initRegisterMap(unsigned int size);
  inline void adoptRegisterMap(::capnp::Orphan< ::capnp::List< ::RegisterMapEntry>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::RegisterMapEntry>> disownRegisterMap();

  inline  ::int64_t getResourceId();
  inline void setResourceId( ::int64_t value);

  inline bool hasUpdateStatus();
  inline  ::capnp::Text::Builder getUpdateStatus();
  inline void setUpdateStatus( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUpdateStatus(unsigned int size);
  inline void adoptUpdateStatus(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUpdateStatus();

  inline bool hasIrodsApiUpdateType();
  inline  ::capnp::Text::Builder getIrodsApiUpdateType();
  inline void setIrodsApiUpdateType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIrodsApiUpdateType(unsigned int size);
  inline void adoptIrodsApiUpdateType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIrodsApiUpdateType();

  inline bool hasResourceName();
  inline  ::capnp::Text::Builder getResourceName();
  inline void setResourceName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initResourceName(unsigned int size);
  inline void adoptResourceName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownResourceName();

  inline  ::int64_t getMaximumRecordsPerSqlCommand();
  inline void setMaximumRecordsPerSqlCommand( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChangeMap::Pipeline {
public:
  typedef ChangeMap Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ChangeDescriptor::Reader::hasFidstr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeDescriptor::Builder::hasFidstr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ChangeDescriptor::Reader::getFidstr() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ChangeDescriptor::Builder::getFidstr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeDescriptor::Builder::setFidstr( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ChangeDescriptor::Builder::initFidstr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ChangeDescriptor::Builder::adoptFidstr(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ChangeDescriptor::Builder::disownFidstr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChangeDescriptor::Reader::hasParentFidstr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeDescriptor::Builder::hasParentFidstr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ChangeDescriptor::Reader::getParentFidstr() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ChangeDescriptor::Builder::getParentFidstr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ChangeDescriptor::Builder::setParentFidstr( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ChangeDescriptor::Builder::initParentFidstr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ChangeDescriptor::Builder::adoptParentFidstr(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ChangeDescriptor::Builder::disownParentFidstr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ChangeDescriptor::Reader::hasObjectName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeDescriptor::Builder::hasObjectName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ChangeDescriptor::Reader::getObjectName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ChangeDescriptor::Builder::getObjectName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ChangeDescriptor::Builder::setObjectName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ChangeDescriptor::Builder::initObjectName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ChangeDescriptor::Builder::adoptObjectName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ChangeDescriptor::Builder::disownObjectName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ChangeDescriptor::Reader::hasLustrePath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeDescriptor::Builder::hasLustrePath() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ChangeDescriptor::Reader::getLustrePath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ChangeDescriptor::Builder::getLustrePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ChangeDescriptor::Builder::setLustrePath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ChangeDescriptor::Builder::initLustrePath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ChangeDescriptor::Builder::adoptLustrePath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ChangeDescriptor::Builder::disownLustrePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::ChangeDescriptor::EventTypeEnum ChangeDescriptor::Reader::getEventType() const {
  return _reader.getDataField< ::ChangeDescriptor::EventTypeEnum>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ChangeDescriptor::EventTypeEnum ChangeDescriptor::Builder::getEventType() {
  return _builder.getDataField< ::ChangeDescriptor::EventTypeEnum>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ChangeDescriptor::Builder::setEventType( ::ChangeDescriptor::EventTypeEnum value) {
  _builder.setDataField< ::ChangeDescriptor::EventTypeEnum>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t ChangeDescriptor::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ChangeDescriptor::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ChangeDescriptor::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ChangeDescriptor::Reader::getOperComplete() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool ChangeDescriptor::Builder::getOperComplete() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void ChangeDescriptor::Builder::setOperComplete(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::ChangeDescriptor::ObjectTypeEnum ChangeDescriptor::Reader::getObjectType() const {
  return _reader.getDataField< ::ChangeDescriptor::ObjectTypeEnum>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::ChangeDescriptor::ObjectTypeEnum ChangeDescriptor::Builder::getObjectType() {
  return _builder.getDataField< ::ChangeDescriptor::ObjectTypeEnum>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ChangeDescriptor::Builder::setObjectType( ::ChangeDescriptor::ObjectTypeEnum value) {
  _builder.setDataField< ::ChangeDescriptor::ObjectTypeEnum>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t ChangeDescriptor::Reader::getFileSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ChangeDescriptor::Builder::getFileSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ChangeDescriptor::Builder::setFileSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t ChangeDescriptor::Reader::getCrIndex() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ChangeDescriptor::Builder::getCrIndex() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ChangeDescriptor::Builder::setCrIndex( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool RegisterMapEntry::Reader::hasLustrePath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RegisterMapEntry::Builder::hasLustrePath() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RegisterMapEntry::Reader::getLustrePath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RegisterMapEntry::Builder::getLustrePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RegisterMapEntry::Builder::setLustrePath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RegisterMapEntry::Builder::initLustrePath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RegisterMapEntry::Builder::adoptLustrePath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RegisterMapEntry::Builder::disownLustrePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RegisterMapEntry::Reader::hasIrodsRegisterPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RegisterMapEntry::Builder::hasIrodsRegisterPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RegisterMapEntry::Reader::getIrodsRegisterPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RegisterMapEntry::Builder::getIrodsRegisterPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RegisterMapEntry::Builder::setIrodsRegisterPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RegisterMapEntry::Builder::initIrodsRegisterPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RegisterMapEntry::Builder::adoptIrodsRegisterPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RegisterMapEntry::Builder::disownIrodsRegisterPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ChangeMap::Reader::hasEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeMap::Builder::hasEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ChangeDescriptor>::Reader ChangeMap::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ChangeDescriptor>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ChangeDescriptor>::Builder ChangeMap::Builder::getEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ChangeDescriptor>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeMap::Builder::setEntries( ::capnp::List< ::ChangeDescriptor>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ChangeDescriptor>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ChangeDescriptor>::Builder ChangeMap::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ChangeDescriptor>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ChangeMap::Builder::adoptEntries(
    ::capnp::Orphan< ::capnp::List< ::ChangeDescriptor>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ChangeDescriptor>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ChangeDescriptor>> ChangeMap::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ChangeDescriptor>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChangeMap::Reader::hasRegisterMap() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeMap::Builder::hasRegisterMap() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::RegisterMapEntry>::Reader ChangeMap::Reader::getRegisterMap() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RegisterMapEntry>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::RegisterMapEntry>::Builder ChangeMap::Builder::getRegisterMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RegisterMapEntry>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ChangeMap::Builder::setRegisterMap( ::capnp::List< ::RegisterMapEntry>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RegisterMapEntry>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::RegisterMapEntry>::Builder ChangeMap::Builder::initRegisterMap(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RegisterMapEntry>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ChangeMap::Builder::adoptRegisterMap(
    ::capnp::Orphan< ::capnp::List< ::RegisterMapEntry>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RegisterMapEntry>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::RegisterMapEntry>> ChangeMap::Builder::disownRegisterMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RegisterMapEntry>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int64_t ChangeMap::Reader::getResourceId() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ChangeMap::Builder::getResourceId() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ChangeMap::Builder::setResourceId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ChangeMap::Reader::hasUpdateStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeMap::Builder::hasUpdateStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ChangeMap::Reader::getUpdateStatus() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ChangeMap::Builder::getUpdateStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ChangeMap::Builder::setUpdateStatus( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ChangeMap::Builder::initUpdateStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ChangeMap::Builder::adoptUpdateStatus(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ChangeMap::Builder::disownUpdateStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ChangeMap::Reader::hasIrodsApiUpdateType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeMap::Builder::hasIrodsApiUpdateType() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ChangeMap::Reader::getIrodsApiUpdateType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ChangeMap::Builder::getIrodsApiUpdateType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ChangeMap::Builder::setIrodsApiUpdateType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ChangeMap::Builder::initIrodsApiUpdateType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ChangeMap::Builder::adoptIrodsApiUpdateType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ChangeMap::Builder::disownIrodsApiUpdateType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ChangeMap::Reader::hasResourceName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeMap::Builder::hasResourceName() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ChangeMap::Reader::getResourceName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ChangeMap::Builder::getResourceName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ChangeMap::Builder::setResourceName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ChangeMap::Builder::initResourceName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ChangeMap::Builder::adoptResourceName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ChangeMap::Builder::disownResourceName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::int64_t ChangeMap::Reader::getMaximumRecordsPerSqlCommand() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ChangeMap::Builder::getMaximumRecordsPerSqlCommand() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ChangeMap::Builder::setMaximumRecordsPerSqlCommand( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_91aad5f4a36030a9_
